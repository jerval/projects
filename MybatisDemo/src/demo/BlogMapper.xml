<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
SQL 映射文件有很少的几个顶级元素（按照它们应该被定义的顺序）： 
  cache -  配置给定命名空间的缓存。 
  cache-ref –  从其他命名空间引用缓存配置。 
  resultMap  –  最复杂，也是最有力量的元素，用来描述如何从数据库结果集中来加
载你的对象。 
  parameterMap  –  已经被废弃了！老式风格的参数映射。内联参数是首选，这个元
素可能在将来被移除。这里不会记录。 
  sql –  可以重用的 SQL 块，也可以被其他语句引用。 
  insert –  映射插入语句 
  update –  映射更新语句 
  delete –  映射删除语句 
  select –  映射查询语句 
<mapper namespace="org.mybatis.example.BlogMapper">
	<cache />

	<select id="selectBlog" parameterType="int" resultType="Blog">
		select *
		from Blog where id = #{id}
	</select>
	<select id="selectPerson" parameterType="int" resultType="hashmap">
		SELECT
		* FROM PERSON WHERE ID = #{id}
	</select>
	<select id="selectPerson" parameterType="int" resultType="hashmap"
		resultMap="personResultMap" flushCache="false" useCache="true"
		timeout="10000" fetchSize="256" statementType="PREPARED"
		resultSetType="FORWARD_ONLY"></select>
	<insert id="insertAuthor" parameterType="domain.blog.Author"
		flushCache="true" statementType="PREPARED" keyProperty=""
		useGeneratedKeys="false" timeout="20000"></insert>
	<update id="insertAuthor" parameterType="domain.blog.Author"
		flushCache="true" statementType="PREPARED" timeout="20000">
	</update>
	<delete id="insertAuthor" parameterType="domain.blog.Author"
		flushCache="true" statementType="PREPARED" timeout="20000">
	</delete>
	<insert id="insertAuthor" parameterType="domain.blog.Author">
		insert into Author
		(id,username,password,email,bio)
		values
		(#{id},#{username},#{password},#{email},#{bio})
	</insert>
	<update id="updateAuthor" parameterType="domain.blog.Author">
		update Author set
		username = #{username},
		password = #{password},
		email = #{email},
		bio =
		#{bio}
		where id = #{id}
	</update>
	<delete id="deleteAuthor" parameterType="int">
		delete from Author
		where
		id = #{id}
	</delete>
	<insert id="insertAuthor" parameterType="domain.blog.Author"
		useGeneratedKeys="true" keyProperty="id">
		insert into Author
		(username,password,email,bio)
		values
		(#{username},#{password},#{email},#{bio})
	</insert>
	MyBat is 有另外一种方法来处理数据库不支持自动生成类型，或者可能 JDBC 驱动不支
	持自动生成主键时的主键生成问题。
	<insert id="insertAuthor" parameterType="domain.blog.Author">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			select
			CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1
		</selectKey>
		insert into Author
		(id, username, password, email,bio,
		favourite_section)
		values
		(#{id}, #{username}, #{password}, #{email},
		#{bio},
		#{favouriteSection,jdbcType=VARCHAR}
		)
	</insert>
	<selectKey keyProperty="id" resultType="int" order="BEFORE"
		statementType="PREPARED">
	</selectKey>
	这个元素可以被用来定义可重用的 SQL 代码段，可以包含在其他语句中。比如：
	<sql id="userColumns"> id,username,password </sql>
	这个 SQL片段可以被包含在其他语句中，例如：
	<select id="selectUsers" parameterType="int" resultType="hashmap">
		select
		<include refid="userColumns" />
		from some_table
		where id = #{id}
	</select>
	如果 User 类型的参数对象传递到了语句中， id、 username 和 password 属性将会被查找，
	然后它们的值就被传递到预处理语句的参数中。
	<insert id="insertUser" parameterType="User">
		insert into users (id,
		age, height,department)
		values (#{id,javaType=int,jdbcType=NUMERIC} ,
		#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler} ,
		#{height,javaType=double,jdbcType=NUMERIC,numericScale=2},
		#{department,mode=OUT,jdbcType=CURSOR,javaType=ResultSet,resultMap=departmentResultMap}
		)
	</insert>
	<select id="selectUsers" parameterType="int" resultType="hashmap">
		select
		id, username, hashedPassword
		from some_table
		where id = #{id}
	</select>
	<select id="selectUsers" parameterType="int" resultType="com.someapp.model.User">
		select
		id, username, hashedPassword
		from some_table
		where id = #{id}
	</select>
	要记住类型别名是你的伙伴。使用它们你可以不用输入类的全路径。比如：
	<!-- In Config XML file -->
	<typeAlias type="com.someapp.model.User" alias="User" />
	<!-- In SQL Mapping XML file -->
	<select id="selectUsers" parameterType="int" resultType="User">
		select
		id, username, hashedPassword
		from some_table
		where id = #{id}
	</select>
	如果列名没有精确匹配，你可以在列名上使用select 字句的别名（一个
	基本的 SQL 特性）来匹配标签。比如：
	<select id=”selectUsers” parameterType=”int” resultType=”User”>
		select
		user_id as “id”,
		user_name as “userName”,
		hashed_password as
		“hashedPassword”
		from some_table
		where id = #{id}
	</select>
	只是出于示例的原因，让我们来看看最后一个示例中
	外部的 resultMap 是什么样子的，这也是解决列名不匹配的另外一种方式。
	<resultMap id="userResultMap" type="User">
		<id property="id" column="user_id" />
		<result property="username" column="username" />
		<result property="password" column="password" />
	</resultMap>
	引用它的语句使用 resultMap 属性就行了（注意我们去掉了 resultType 属性）。比如：
	<select id=”selectUsers” parameterType=”int” resultMap=”userResultMap”>
		select user_id, user_name, hashed_password
		from some_table
		where id = #{id}
	</select>
	
</mapper> 
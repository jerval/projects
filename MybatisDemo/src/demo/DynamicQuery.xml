<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.example.BlogMapper">
	<select id=”findActiveBlogWithTitleLike” parameterType=”Blog”
		resultType=”Blog”>
		SELECT * FROM BLOG
		WHERE state = „ACTIVE‟
		<if test=”title ! null ”>
			AND title like #{title}
		</if>
	</select>
	<select id=”findActiveBlogLike” parameterType=”Blog” resultType=”Blog”>
		SELECT * FROM BLOG WHERE state = „ACTIVE‟
		<if test=”title ! null ”>
			AND title like #{title}
		</if>
		<if test=”author ! null and author.name ! =null”>
			AND title like
			#{author.name}
		</if>
	</select>
	<select id=”findActiveBlogLike” parameterType=”Blog” resultType=”Blog”>
		SELECT * FROM BLOG WHERE state = „ACTIVE‟
		<choose>
			<when test=”title ! null ”>
				AND title like #{title}
			</when>
			<when test=”author ! null and author.name ! =null”>
				AND title like
				#{author.name}
			</when>
			<otherwise>
				AND featured = 1
			</otherwise>
		</choose>
	</select>
	<select id=”findActiveBlogLike” parameterType=”Blog” resultType=”Blog”>
		SELECT * FROM BLOG
		<where>
			<if test=”state ! null ”>
				state = #{state}
			</if>
			<if test=”title ! null ”>
				AND title like #{title}
			</if>
			<if test=”author ! null and author.name ! =null”>
				AND title like
				#{author.name}
			</if>
		</where>
	</select>
	where 元素知道如果由被包含的标记返回任意内容，就仅仅插入“WHERE”。而且，如
	果以“AND”或“OR”开头的内容，那么就会跳过
	WHERE 不插入。
	如果 where 元素没有做出你想要的，你可以使用 trim 元素来自定义。比如，和 where
	元素相等的 trim
	元素是：
	<trim prefix="WHERE" prefixOverrides="AND |OR ">
		…
	</trim>
	overrides 属性采用管道文本分隔符来覆盖，这里的空白也是重要的。它的结果就是移除
	在 overrides 属性中指定的内容，插入在
	with 属性中的内容。
	<update id="updateAuthorIfNecessary" parameterType="domain.blog.Author">
		update Author
		<set>
			<if test="username != null">username=#{username},</if>
			<if test="password != null">password=#{password},</if>
			<if test="email != null">email=#{email},</if>
			<if test="bio != null">bio=#{bio}</if>
		</set>
		where id=#{id}
	</update>
	如果你对和这相等的 trim 元素好奇，它看起来就是这样的：
	<trim prefix="SET" suffixOverrides=",">
		…
	</trim>
	另外一个动态SQL通用的必要操作是迭代一个集合，通常是构建在IN条件中的。比如：
	<select id="selectPostIn" resultType="domain.blog.Post">
		SELECT *
		FROM POST P
		WHERE ID in
		注意：你可以传递一个 List 实例或者数组作为参数对象传给 MyBat is。当你这么做的时
候，MyBat is 会自动将它包装在一个 Map 中，用名称在作为键。List 实例将会以“list”
作为键，而数组实例将会以“array”作为键。 
		<foreach item="item" index="index" collection="list" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</select>
</mapper>